@model HomePageModel

@{
    ViewData["Title"] = "My Recipes";
}

<div class="text-center">
    <h1 class="display-4">My Recipes</h1>
    <p>Select a recipe to get the full recipe write up.</p>

    @*TODO: Add a dropdown to select a recipe*@
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="form-group">
                <select id="recipeDropdown" class="form-select" onchange="handleRecipeSelection()">
                    <option value="">-- Choose a Recipe --</option>
                    @foreach (var recipe in Model.Recipes)
                    {
                        <option value="@recipe.Id">@recipe.Name</option>
                    }
                </select>
            </div>
        </div>
    </div>

    @*TODO: Load the recipe when the user selects one*@
    @*TODO: An area to display the recipe with some miminal styling*@
    <div id="recipeDisplay" class="mt-4" style="display: none;">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h3 id="recipeName" class="card-title mb-0"></h3>
                        <div>
                            <button id="editRecipeBtn" class="btn btn-sm btn-outline-primary me-2" onclick="editRecipe()">Edit</button>
                            <button id="deleteRecipeBtn" class="btn btn-sm btn-outline-danger" onclick="deleteRecipe()">Delete</button>
                        </div>
                    </div>
                    <div class="card-body">
                        <p id="recipeContent" class="card-text"></p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Recipe Form -->
    <div class="row justify-content-center mt-5">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title mb-0">Add New Recipe</h4>
                </div>
                <div class="card-body">
                    <form id="addRecipeForm">
                        <div class="mb-3">
                            <label for="recipeNameInput" class="form-label">Recipe Name</label>
                            <input type="text" class="form-control" id="recipeNameInput" required>
                        </div>
                        <div class="mb-3">
                            <label for="recipeContentInput" class="form-label">Recipe Instructions</label>
                            <textarea class="form-control" id="recipeContentInput" rows="4" required></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Add Recipe</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
</div>

<script>
    let currentRecipeId = null;

    async function handleRecipeSelection(){
        var dropdown = document.getElementById("recipeDropdown");
        var selectedRecipeId = dropdown.options[dropdown.selectedIndex].value;
        var recipeDisplay = document.getElementById("recipeDisplay");

        if (!selectedRecipeId) {
            recipeDisplay.style.display = "none";
            currentRecipeId = null;
            return;
        }

        try {
            const response = await fetch(`/api/recipe/${selectedRecipeId}`);
            if (response.ok) {
                const recipe = await response.json();
                
                // TODO: Get the response data and dsiplay it on the screen
                document.getElementById("recipeName").textContent = recipe.name;
                document.getElementById("recipeContent").textContent = recipe.recipe;
                recipeDisplay.style.display = "block";
                currentRecipeId = recipe.id;
            } else {
                console.error("Failed to fetch recipe details");
                recipeDisplay.style.display = "none";
                currentRecipeId = null;
            }
        } catch (error) {
            console.error("An error occurred while fetching recipe details:", error);
            recipeDisplay.style.display = "none";
            currentRecipeId = null;
        }
    }

    // Add Recipe Form Handler
    document.getElementById("addRecipeForm").addEventListener("submit", async function(e) {
        e.preventDefault();
        
        const name = document.getElementById("recipeNameInput").value.trim();
        const recipe = document.getElementById("recipeContentInput").value.trim();
        
        if (!name || !recipe) {
            alert("Please fill in all fields");
            return;
        }

        try {
            const response = await fetch("/api/recipe", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ name: name, recipe: recipe })
            });

            if (response.ok) {
                const newRecipe = await response.json();
                alert("Recipe added successfully!");
                
                // Clear form
                document.getElementById("recipeNameInput").value = "";
                document.getElementById("recipeContentInput").value = "";
                
                // Refresh the dropdown
                location.reload();
            } else {
                const error = await response.text();
                alert("Error adding recipe: " + error);
            }
        } catch (error) {
            console.error("Error adding recipe:", error);
            alert("Error adding recipe. Please try again.");
        }
    });

    // Edit Recipe Function
    function editRecipe() {
        if (!currentRecipeId) return;
        
        const newName = prompt("Enter new recipe name:", document.getElementById("recipeName").textContent);
        const newRecipe = prompt("Enter new recipe instructions:", document.getElementById("recipeContent").textContent);
        
        if (newName && newRecipe) {
            updateRecipe(currentRecipeId, newName, newRecipe);
        }
    }

    // Update Recipe Function
    async function updateRecipe(id, name, recipe) {
        try {
            const response = await fetch(`/api/recipe/${id}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ name: name, recipe: recipe })
            });

            if (response.ok) {
                alert("Recipe updated successfully!");
                // Refresh the page to update the dropdown
                location.reload();
            } else {
                const error = await response.text();
                alert("Error updating recipe: " + error);
            }
        } catch (error) {
            console.error("Error updating recipe:", error);
            alert("Error updating recipe. Please try again.");
        }
    }

    // Delete Recipe Function
    function deleteRecipe() {
        if (!currentRecipeId) return;
        
        if (confirm("Are you sure you want to delete this recipe?")) {
            deleteRecipeById(currentRecipeId);
        }
    }

    // Delete Recipe by ID
    async function deleteRecipeById(id) {
        try {
            const response = await fetch(`/api/recipe/${id}`, {
                method: "DELETE"
            });

            if (response.ok) {
                alert("Recipe deleted successfully!");
                // Refresh the page to update the dropdown
                location.reload();
            } else {
                alert("Error deleting recipe. Please try again.");
            }
        } catch (error) {
            console.error("Error deleting recipe:", error);
            alert("Error deleting recipe. Please try again.");
        }
    }
</script>
