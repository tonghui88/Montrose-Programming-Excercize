@model HomePageModel

@{
    ViewData["Title"] = "My Recipes";
}

<div class="text-center">
    <h1 class="display-4">My Recipes</h1>
    <p>Select a recipe to get the full recipe write up.</p>

    @*TODO: Add a dropdown to select a recipe*@
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="form-group">
                <select id="recipeDropdown" class="form-select" onchange="handleRecipeSelection()">
                    <option value="">-- Choose a Recipe --</option>
                    @foreach (var recipe in Model.Recipes)
                    {
                        <option value="@recipe.Id">@recipe.Name</option>
                    }
                </select>
            </div>
        </div>
    </div>

    @*TODO: Load the recipe when the user selects one*@
    @*TODO: An area to display the recipe with some miminal styling*@
    <div id="recipeDisplay" class="mt-4" style="display: none;">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h3 id="recipeName" class="card-title mb-0"></h3>
                        <div>
                            <button id="editRecipeBtn" class="btn btn-sm btn-outline-primary me-2" onclick="editRecipe()">Edit</button>
                            <button id="deleteRecipeBtn" class="btn btn-sm btn-outline-danger" onclick="deleteRecipe()">Delete</button>
                        </div>
                    </div>
                    <div class="card-body">
                        <p id="recipeContent" class="card-text"></p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Recipe Button -->
    <div class="row justify-content-center mt-4">
        <div class="col-md-6 text-center">
            <button type="button" class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#addRecipeModal">
                <i class="bi bi-plus-circle"></i> Add New Recipe
            </button>
        </div>
    </div>

    <!-- Add Recipe Modal -->
    <div class="modal fade" id="addRecipeModal" tabindex="-1" aria-labelledby="addRecipeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addRecipeModalLabel">Add New Recipe</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addRecipeModalForm">
                        <div class="mb-3">
                            <label for="modalRecipeNameInput" class="form-label">Recipe Name *</label>
                            <input type="text" class="form-control" id="modalRecipeNameInput" required>
                            <div class="invalid-feedback" id="modalNameError"></div>
                        </div>
                        <div class="mb-3">
                            <label for="modalRecipeContentInput" class="form-label">Recipe Instructions *</label>
                            <textarea class="form-control" id="modalRecipeContentInput" rows="4" required></textarea>
                            <div class="invalid-feedback" id="modalContentError"></div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="submitModalForm()">
                        <span class="spinner-border spinner-border-sm d-none" id="modalSpinner"></span>
                        <span id="modalButtonText">Add Recipe</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this recipe?</p>
                    <p class="text-muted"><strong id="recipeToDeleteName"></strong></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                        <span class="spinner-border spinner-border-sm d-none" id="deleteSpinner"></span>
                        <span id="deleteButtonText">Delete Recipe</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Container -->
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1055;">
        <div id="successToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header bg-success text-white">
                <i class="bi bi-check-circle-fill me-2"></i>
                <strong class="me-auto">Success</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body" id="successToastBody">
                Recipe deleted successfully!
            </div>
        </div>
        <div id="errorToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header bg-danger text-white">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <strong class="me-auto">Error</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body" id="errorToastBody">
                Error deleting recipe. Please try again.
            </div>
        </div>
    </div>
    
</div>

<script>
    let currentRecipeId = null;

    async function handleRecipeSelection(){
        var dropdown = document.getElementById("recipeDropdown");
        var selectedRecipeId = dropdown.options[dropdown.selectedIndex].value;
        var recipeDisplay = document.getElementById("recipeDisplay");

        if (!selectedRecipeId) {
            recipeDisplay.style.display = "none";
            currentRecipeId = null;
            return;
        }

        try {
            const response = await fetch(`/api/recipe/${selectedRecipeId}`);
            if (response.ok) {
                const recipe = await response.json();
                
                // TODO: Get the response data and dsiplay it on the screen
                document.getElementById("recipeName").textContent = recipe.name;
                document.getElementById("recipeContent").textContent = recipe.recipe;
                recipeDisplay.style.display = "block";
                currentRecipeId = recipe.id;
            } else {
                console.error("Failed to fetch recipe details");
                recipeDisplay.style.display = "none";
                currentRecipeId = null;
            }
        } catch (error) {
            console.error("An error occurred while fetching recipe details:", error);
            recipeDisplay.style.display = "none";
            currentRecipeId = null;
        }
    }


    // Edit Recipe Function
    function editRecipe() {
        if (!currentRecipeId) return;
        
        const newName = prompt("Enter new recipe name:", document.getElementById("recipeName").textContent);
        const newRecipe = prompt("Enter new recipe instructions:", document.getElementById("recipeContent").textContent);
        
        if (newName && newRecipe) {
            updateRecipe(currentRecipeId, newName, newRecipe);
        }
    }

    // Update Recipe Function
    async function updateRecipe(id, name, recipe) {
        try {
            const response = await fetch(`/api/recipe/${id}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ name: name, recipe: recipe })
            });

            if (response.ok) {
                alert("Recipe updated successfully!");
                // Refresh the page to update the dropdown
                location.reload();
            } else {
                const error = await response.text();
                alert("Error updating recipe: " + error);
            }
        } catch (error) {
            console.error("Error updating recipe:", error);
            alert("Error updating recipe. Please try again.");
        }
    }

    // Delete Recipe Function
    function deleteRecipe() {
        if (!currentRecipeId) return;
        
        // Get the recipe name to show in confirmation
        const recipeName = document.getElementById("recipeName").textContent;
        document.getElementById("recipeToDeleteName").textContent = recipeName;
        
        // Show Bootstrap confirmation modal
        const deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
        deleteModal.show();
    }

    // Delete Recipe by ID
    async function deleteRecipeById(id) {
        const deleteBtn = document.getElementById('confirmDeleteBtn');
        const deleteSpinner = document.getElementById('deleteSpinner');
        const deleteButtonText = document.getElementById('deleteButtonText');
        
        // Show loading state
        deleteSpinner.classList.remove('d-none');
        deleteButtonText.textContent = 'Deleting...';
        deleteBtn.disabled = true;

        try {
            const response = await fetch(`/api/recipe/${id}`, {
                method: "DELETE"
            });

            if (response.ok) {
                // Close the confirmation modal
                const deleteModal = bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal'));
                deleteModal.hide();
                
                // Show success toast
                showSuccessToast("Recipe deleted successfully!");
                
                // Remove recipe from dropdown
                const dropdown = document.getElementById('recipeDropdown');
                const optionToRemove = dropdown.querySelector(`option[value="${id}"]`);
                if (optionToRemove) {
                    optionToRemove.remove();
                }
                
                // Hide recipe display
                document.getElementById("recipeDisplay").style.display = "none";
                currentRecipeId = null;
            } else {
                showErrorToast("Error deleting recipe. Please try again.");
            }
        } catch (error) {
            console.error("Error deleting recipe:", error);
            showErrorToast("Error deleting recipe. Please try again.");
        } finally {
            // Restore button state
            deleteSpinner.classList.add('d-none');
            deleteButtonText.textContent = 'Delete Recipe';
            deleteBtn.disabled = false;
        }
    }

    // Modal Form Handling
    function submitModalForm() {
        clearModalErrors();
        
        const name = document.getElementById("modalRecipeNameInput").value.trim();
        const recipe = document.getElementById("modalRecipeContentInput").value.trim();
        
        // Validation
        let hasErrors = false;
        
        if (!name) {
            showModalError("modalRecipeNameInput", "modalNameError", "Recipe name is required");
            hasErrors = true;
        }
        
        if (!recipe) {
            showModalError("modalRecipeContentInput", "modalContentError", "Recipe instructions are required");
            hasErrors = true;
        }
        
        if (hasErrors) return;

        // Show loading state
        const submitBtn = document.querySelector('#addRecipeModal .btn-primary');
        const spinner = document.getElementById('modalSpinner');
        const buttonText = document.getElementById('modalButtonText');
        
        spinner.classList.remove('d-none');
        buttonText.textContent = 'Adding...';
        submitBtn.disabled = true;

        // Submit the form
        addRecipeViaModal(name, recipe, submitBtn, spinner, buttonText);
    }

    async function addRecipeViaModal(name, recipe, submitBtn, spinner, buttonText) {
        try {
            const response = await fetch("/api/recipe", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ name: name, recipe: recipe })
            });

            if (response.ok) {
                const newRecipe = await response.json();
                
                // Show success message
                showModalSuccess(`Recipe "${newRecipe.name}" added successfully!`);
                
                // Clear form
                document.getElementById("modalRecipeNameInput").value = "";
                document.getElementById("modalRecipeContentInput").value = "";
                
                setTimeout(() => {
                    // Close modal after a short delay
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addRecipeModal'));
                    modal.hide();
                        
                    // Add new recipe to the dropdown list
                    var dropdown = document.getElementById("recipeDropdown");
                    var option = document.createElement("option");
                    option.value = newRecipe.id;
                    option.text = newRecipe.name;
                    dropdown.appendChild(option);
                }, 1000)
            } else {
                const error = await response.text();
                showModalError("modalRecipeNameInput", "modalNameError", "Error: " + error);
            }
        } catch (error) {
            console.error("Error adding recipe:", error);
            showModalError("modalRecipeNameInput", "modalNameError", "Error adding recipe. Please try again.");
        } finally {
            // Restore button state
            spinner.classList.add('d-none');
            buttonText.textContent = 'Add Recipe';
            submitBtn.disabled = false;
        }
    }

    function showModalError(inputId, errorId, message) {
        const input = document.getElementById(inputId);
        const errorDiv = document.getElementById(errorId);
        
        input.classList.add('is-invalid');
        errorDiv.textContent = message;
    }

    function clearModalErrors() {
        document.querySelectorAll('#addRecipeModal .is-invalid').forEach(el => el.classList.remove('is-invalid'));
        document.querySelectorAll('#addRecipeModal .invalid-feedback').forEach(el => el.textContent = '');
    }

    function showModalSuccess(message) {
        const modalBody = document.querySelector('#addRecipeModal .modal-body');
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-success alert-dismissible fade show';
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        modalBody.insertBefore(alertDiv, modalBody.firstChild);
        
        // Auto-dismiss after 3 seconds
        setTimeout(() => {
            if (alertDiv.parentNode) {
                alertDiv.remove();
            }
        }, 3000);
    }

    // Toast Functions
    function showSuccessToast(message) {
        const toastBody = document.getElementById('successToastBody');
        toastBody.textContent = message;
        const toast = new bootstrap.Toast(document.getElementById('successToast'));
        toast.show();
    }

    function showErrorToast(message) {
        const toastBody = document.getElementById('errorToastBody');
        toastBody.textContent = message;
        const toast = new bootstrap.Toast(document.getElementById('errorToast'));
        toast.show();
    }

    // Event Listeners
    document.addEventListener('DOMContentLoaded', function() {
        // Clear modal form when modal is closed
        document.getElementById('addRecipeModal').addEventListener('hidden.bs.modal', function () {
            document.getElementById("modalRecipeNameInput").value = "";
            document.getElementById("modalRecipeContentInput").value = "";
            clearModalErrors();
        });

        // Delete confirmation button event listener
        document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
            if (currentRecipeId) {
                deleteRecipeById(currentRecipeId);
            }
        });
    });
</script>
