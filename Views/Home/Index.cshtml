@model HomePageModel

@{
    ViewData["Title"] = "My Recipes";
}

<div class="text-center">
    <h1 class="display-4">My Recipes</h1>
    <p>Select a recipe to get the full recipe write up.</p>

    @*TODO: Add a dropdown to select a recipe*@
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="form-group">
                <select id="recipeDropdown" class="form-select" onchange="handleRecipeSelection()">
                    <option value="">-- Choose a Recipe --</option>
                    @foreach (var recipe in Model.Recipes)
                    {
                        <option value="@recipe.Id">@recipe.Name</option>
                    }
                </select>
            </div>
        </div>
    </div>

    @*TODO: Load the recipe when the user selects one*@
    @*TODO: An area to display the recipe with some miminal styling*@
    <div id="recipeDisplay" class="mt-4" style="display: none;">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h3 id="recipeName" class="card-title mb-0"></h3>
                        <div>
                            <button id="editRecipeBtn" class="btn btn-sm btn-outline-primary me-2" onclick="editRecipe()">Edit</button>
                            <button id="deleteRecipeBtn" class="btn btn-sm btn-outline-danger" onclick="deleteRecipe()">Delete</button>
                        </div>
                    </div>
                    <div class="card-body">
                        <p id="recipeContent" class="card-text"></p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Recipe Button -->
    <div class="row justify-content-center mt-4">
        <div class="col-md-6 text-center">
            <button type="button" class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#addRecipeModal">
                <i class="bi bi-plus-circle"></i> Add New Recipe
            </button>
        </div>
    </div>

    <!-- Add Recipe Modal -->
    <div class="modal fade" id="addRecipeModal" tabindex="-1" aria-labelledby="addRecipeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addRecipeModalLabel">Add New Recipe</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addRecipeModalForm">
                        <div class="mb-3">
                            <label for="modalRecipeNameInput" class="form-label">Recipe Name *</label>
                            <input type="text" class="form-control" id="modalRecipeNameInput" required>
                            <div class="invalid-feedback" id="modalNameError"></div>
                        </div>
                        <div class="mb-3">
                            <label for="modalRecipeContentInput" class="form-label">Recipe Instructions *</label>
                            <textarea class="form-control" id="modalRecipeContentInput" rows="4" required></textarea>
                            <div class="invalid-feedback" id="modalContentError"></div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="submitModalForm()">
                        <span class="spinner-border spinner-border-sm d-none" id="modalSpinner"></span>
                        <span id="modalButtonText">Add Recipe</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this recipe?</p>
                    <p class="text-muted"><strong id="recipeToDeleteName"></strong></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                        <span class="spinner-border spinner-border-sm d-none" id="deleteSpinner"></span>
                        <span id="deleteButtonText">Delete Recipe</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Recipe Modal -->
    <div class="modal fade" id="editRecipeModal" tabindex="-1" aria-labelledby="editRecipeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editRecipeModalLabel">Edit Recipe</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editRecipeModalForm">
                        <div class="mb-3">
                            <label for="editRecipeNameInput" class="form-label">Recipe Name *</label>
                            <input type="text" class="form-control" id="editRecipeNameInput" required>
                            <div class="invalid-feedback" id="editNameError"></div>
                        </div>
                        <div class="mb-3">
                            <label for="editRecipeContentInput" class="form-label">Recipe Instructions *</label>
                            <textarea class="form-control" id="editRecipeContentInput" rows="6" required></textarea>
                            <div class="invalid-feedback" id="editContentError"></div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="submitEditModalForm()">
                        <span class="spinner-border spinner-border-sm d-none" id="editSpinner"></span>
                        <span id="editButtonText">Update Recipe</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Container -->
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1055;">
        <div id="successToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header bg-success text-white">
                <i class="bi bi-check-circle-fill me-2"></i>
                <strong class="me-auto">Success</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body" id="successToastBody">
                Recipe updated successfully!
            </div>
        </div>
        <div id="errorToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header bg-danger text-white">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <strong class="me-auto">Error</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body" id="errorToastBody">
                Error updating recipe. Please try again.
            </div>
        </div>
    </div>
    
</div>

<script>
    // =============================================================================
    // RECIPE MANAGER - Optimized and Refactored
    // =============================================================================
    
    class RecipeManager {
        constructor() {
            this.currentRecipeId = null;
            this.apiBaseUrl = '/api/recipe';
            this.init();
        }

        init() {
            this.setupEventListeners();
        }

        // =============================================================================
        // EVENT LISTENERS
        // =============================================================================
        
        setupEventListeners() {
            document.addEventListener('DOMContentLoaded', () => {
                this.setupModalEventListeners();
                this.setupDeleteConfirmationListener();
            });
        }

        setupModalEventListeners() {
            // Add modal cleanup
            this.addModalCleanupListener('addRecipeModal', {
                nameInput: 'modalRecipeNameInput',
                contentInput: 'modalRecipeContentInput',
                errorContainer: '#addRecipeModal'
            });

            // Edit modal cleanup
            this.addModalCleanupListener('editRecipeModal', {
                nameInput: 'editRecipeNameInput',
                contentInput: 'editRecipeContentInput',
                errorContainer: '#editRecipeModal'
            });
        }

        addModalCleanupListener(modalId, fields) {
            document.getElementById(modalId).addEventListener('hidden.bs.modal', () => {
                document.getElementById(fields.nameInput).value = '';
                document.getElementById(fields.contentInput).value = '';
                this.clearValidationErrors(fields.errorContainer);
            });
        }

        setupDeleteConfirmationListener() {
            document.getElementById('confirmDeleteBtn').addEventListener('click', () => {
                if (this.currentRecipeId) {
                    this.deleteRecipeById(this.currentRecipeId);
                }
            });
        }

        // =============================================================================
        // RECIPE SELECTION
        // =============================================================================
        
        async handleRecipeSelection() {
            const dropdown = document.getElementById("recipeDropdown");
            const selectedRecipeId = dropdown.options[dropdown.selectedIndex].value;
            const recipeDisplay = document.getElementById("recipeDisplay");

            if (!selectedRecipeId) {
                this.hideRecipeDisplay();
                return;
            }

            try {
                const recipe = await this.fetchRecipe(selectedRecipeId);
                this.displayRecipe(recipe);
                this.currentRecipeId = recipe.id;
            } catch (error) {
                console.error('Error fetching recipe:', error);
                this.hideRecipeDisplay();
            }
        }

        async fetchRecipe(id) {
            const response = await fetch(`${this.apiBaseUrl}/${id}`);
            if (!response.ok) {
                throw new Error('Failed to fetch recipe');
            }
            return await response.json();
        }

        displayRecipe(recipe) {
            document.getElementById("recipeName").textContent = recipe.name;
            document.getElementById("recipeContent").textContent = recipe.recipe;
            document.getElementById("recipeDisplay").style.display = "block";
        }

        hideRecipeDisplay() {
            document.getElementById("recipeDisplay").style.display = "none";
            this.currentRecipeId = null;
        }

        // =============================================================================
        // RECIPE CRUD OPERATIONS
        // =============================================================================
        
        async createRecipe(name, recipe) {
            const response = await this.makeApiCall('POST', '', { name, recipe });
            if (response.ok) {
                const newRecipe = await response.json();
                this.showSuccessToast(`Recipe "${newRecipe.name}" added successfully!`);
                this.addRecipeToDropdown(newRecipe);
                return newRecipe;
            } else {
                const error = await response.text();
                throw new Error(error);
            }
        }

        async updateRecipe(id, name, recipe) {
            const response = await this.makeApiCall('PUT', `/${id}`, { name, recipe });
            if (response.ok) {
                this.showSuccessToast("Recipe updated successfully!");
                this.updateRecipeInUI(id, name, recipe);
                return true;
            } else {
                const error = await response.text();
                throw new Error(error);
            }
        }

        async deleteRecipe(id) {
            const response = await this.makeApiCall('DELETE', `/${id}`);
            if (response.ok) {
                this.showSuccessToast("Recipe deleted successfully!");
                this.removeRecipeFromUI(id);
                return true;
            } else {
                throw new Error('Failed to delete recipe');
            }
        }

        async makeApiCall(method, endpoint, data = null) {
            const config = {
                method,
                headers: { 'Content-Type': 'application/json' }
            };
            
            if (data) {
                config.body = JSON.stringify(data);
            }
            
            return await fetch(`${this.apiBaseUrl}${endpoint}`, config);
        }

        // =============================================================================
        // UI UPDATES
        // =============================================================================
        
        addRecipeToDropdown(recipe) {
            const dropdown = document.getElementById('recipeDropdown');
            const option = document.createElement('option');
            option.value = recipe.id;
            option.textContent = recipe.name;
            dropdown.appendChild(option);
        }

        updateRecipeInUI(id, name, recipe) {
            // Update displayed recipe
            document.getElementById("recipeName").textContent = name;
            document.getElementById("recipeContent").textContent = recipe;
            
            // Update dropdown option
            const dropdown = document.getElementById('recipeDropdown');
            const option = dropdown.querySelector(`option[value="${id}"]`);
            if (option) {
                option.textContent = name;
            }
        }

        removeRecipeFromUI(id) {
            // Remove from dropdown
            const dropdown = document.getElementById('recipeDropdown');
            const option = dropdown.querySelector(`option[value="${id}"]`);
            if (option) {
                option.remove();
            }
            
            // Hide recipe display
            this.hideRecipeDisplay();
        }

        // =============================================================================
        // MODAL OPERATIONS
        // =============================================================================
        
        openAddModal() {
            const modal = new bootstrap.Modal(document.getElementById('addRecipeModal'));
            modal.show();
        }

        openEditModal() {
            if (!this.currentRecipeId) return;
            
            const currentName = document.getElementById("recipeName").textContent;
            const currentRecipe = document.getElementById("recipeContent").textContent;
            
            document.getElementById("editRecipeNameInput").value = currentName;
            document.getElementById("editRecipeContentInput").value = currentRecipe;
            this.clearValidationErrors('#editRecipeModal');
            
            const modal = new bootstrap.Modal(document.getElementById('editRecipeModal'));
            modal.show();
        }

        openDeleteModal() {
            if (!this.currentRecipeId) return;
            
            const recipeName = document.getElementById("recipeName").textContent;
            document.getElementById("recipeToDeleteName").textContent = recipeName;
            
            const modal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
            modal.show();
        }

        // =============================================================================
        // FORM SUBMISSIONS
        // =============================================================================
        
        async submitAddForm() {
            const formData = this.getFormData('addRecipeModal', {
                name: 'modalRecipeNameInput',
                content: 'modalRecipeContentInput'
            });

            if (!this.validateFormData(formData, 'addRecipeModal')) {
                return;
            }

            const buttonConfig = this.getButtonConfig('addRecipeModal');
            this.setLoadingState(buttonConfig, true, 'Adding...');

            try {
                await this.createRecipe(formData.name, formData.content);
                this.clearForm('addRecipeModal', {
                    name: 'modalRecipeNameInput',
                    content: 'modalRecipeContentInput'
                });
                this.closeModal('addRecipeModal');
            } catch (error) {
                this.showFormError('addRecipeModal', 'modalNameError', error.message);
            } finally {
                this.setLoadingState(buttonConfig, false, 'Add Recipe');
            }
        }

        async submitEditForm() {
            const formData = this.getFormData('editRecipeModal', {
                name: 'editRecipeNameInput',
                content: 'editRecipeContentInput'
            });

            if (!this.validateFormData(formData, 'editRecipeModal')) {
                return;
            }

            const buttonConfig = this.getButtonConfig('editRecipeModal');
            this.setLoadingState(buttonConfig, true, 'Updating...');

            try {
                await this.updateRecipe(this.currentRecipeId, formData.name, formData.content);
                this.closeModal('editRecipeModal');
            } catch (error) {
                this.showFormError('editRecipeModal', 'editNameError', error.message);
            } finally {
                this.setLoadingState(buttonConfig, false, 'Update Recipe');
            }
        }

        async submitDeleteForm() {
            const buttonConfig = this.getButtonConfig('deleteConfirmModal');
            this.setLoadingState(buttonConfig, true, 'Deleting...');

            try {
                await this.deleteRecipe(this.currentRecipeId);
                this.closeModal('deleteConfirmModal');
            } catch (error) {
                this.showErrorToast(error.message);
            } finally {
                this.setLoadingState(buttonConfig, false, 'Delete Recipe');
            }
        }

        // =============================================================================
        // FORM UTILITIES
        // =============================================================================
        
        getFormData(modalId, fieldMap) {
            return {
                name: document.getElementById(fieldMap.name).value.trim(),
                content: document.getElementById(fieldMap.content).value.trim()
            };
        }

        validateFormData(formData, modalId) {
            this.clearValidationErrors(`#${modalId}`);
            let hasErrors = false;

            if (!formData.name) {
                this.showFieldError(modalId, 'name', 'Recipe name is required');
                hasErrors = true;
            }

            if (!formData.content) {
                this.showFieldError(modalId, 'content', 'Recipe instructions are required');
                hasErrors = true;
            }

            return !hasErrors;
        }

        showFieldError(modalId, fieldType, message) {
            const fieldMap = {
                'addRecipeModal': { name: 'modalNameError', content: 'modalContentError' },
                'editRecipeModal': { name: 'editNameError', content: 'editContentError' }
            };
            
            const inputMap = {
                'addRecipeModal': { name: 'modalRecipeNameInput', content: 'modalRecipeContentInput' },
                'editRecipeModal': { name: 'editRecipeNameInput', content: 'editRecipeContentInput' }
            };

            const errorId = fieldMap[modalId][fieldType];
            const inputId = inputMap[modalId][fieldType];
            
            this.showFormError(modalId, errorId, message);
            document.getElementById(inputId).classList.add('is-invalid');
        }

        showFormError(modalId, errorId, message) {
            const errorElement = document.getElementById(errorId);
            if (errorElement) {
                errorElement.textContent = message;
            }
        }

        clearValidationErrors(container) {
            const containerElement = typeof container === 'string' ? document.querySelector(container) : container;
            containerElement.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
            containerElement.querySelectorAll('.invalid-feedback').forEach(el => el.textContent = '');
        }

        clearForm(modalId, fieldMap) {
            document.getElementById(fieldMap.name).value = '';
            document.getElementById(fieldMap.content).value = '';
        }

        getButtonConfig(modalId) {
            const buttonMap = {
                'addRecipeModal': { btn: '.btn-primary', spinner: 'modalSpinner', text: 'modalButtonText' },
                'editRecipeModal': { btn: '.btn-primary', spinner: 'editSpinner', text: 'editButtonText' },
                'deleteConfirmModal': { btn: '#confirmDeleteBtn', spinner: 'deleteSpinner', text: 'deleteButtonText' }
            };

            const config = buttonMap[modalId];
            return {
                button: document.querySelector(`#${modalId} ${config.btn}`),
                spinner: document.getElementById(config.spinner),
                text: document.getElementById(config.text)
            };
        }

        setLoadingState(buttonConfig, isLoading, text) {
            if (isLoading) {
                buttonConfig.spinner.classList.remove('d-none');
                buttonConfig.text.textContent = text;
                buttonConfig.button.disabled = true;
            } else {
                buttonConfig.spinner.classList.add('d-none');
                buttonConfig.text.textContent = text;
                buttonConfig.button.disabled = false;
            }
        }

        closeModal(modalId) {
            const modal = bootstrap.Modal.getInstance(document.getElementById(modalId));
            if (modal) {
                modal.hide();
            }
        }

        // =============================================================================
        // NOTIFICATIONS
        // =============================================================================
        
        showSuccessToast(message) {
            this.showToast('successToast', 'successToastBody', message);
        }

        showErrorToast(message) {
            this.showToast('errorToast', 'errorToastBody', message);
        }

        showToast(toastId, bodyId, message) {
            const toastBody = document.getElementById(bodyId);
            toastBody.textContent = message;
            const toast = new bootstrap.Toast(document.getElementById(toastId));
            toast.show();
        }
    }

    // =============================================================================
    // GLOBAL INSTANCE AND PUBLIC FUNCTIONS
    // =============================================================================
    
    const recipeManager = new RecipeManager();

    // Public functions for HTML onclick handlers
    function handleRecipeSelection() {
        recipeManager.handleRecipeSelection();
    }

    function editRecipe() {
        recipeManager.openEditModal();
    }

    function deleteRecipe() {
        recipeManager.openDeleteModal();
    }

    function submitModalForm() {
        recipeManager.submitAddForm();
    }

    function submitEditModalForm() {
        recipeManager.submitEditForm();
    }
</script>
